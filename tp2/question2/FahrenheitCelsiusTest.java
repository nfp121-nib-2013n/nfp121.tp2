package question2;


/**
 * Classe-test FahrenheitCelsiusTest.
 *
 * @author  (votre nom)
 * @version (un numéro de version ou une date)
 *
 * Les classes-test sont documentées ici :
 * http://junit.sourceforge.net/javadoc/junit/framework/TestCase.html
 * et sont basées sur le document © 2002 Robert A. Ballance intitulé
 * «JUnit: Unit Testing Framework».
 *
 * Les objets Test (et TestSuite) sont associés aux classes à tester
 * par la simple relation yyyTest (e.g. qu'un Test de la classe Name.java
 * se nommera NameTest.java); les deux se retrouvent dans le même paquetage.
 * Les "engagements" (anglais : "fixture") forment un ensemble de conditions
 * qui sont vraies pour chaque méthode Test à exécuter.  Il peut y avoir
 * plus d'une méthode Test dans une classe Test; leur ensemble forme un
 * objet TestSuite.
 * BlueJ découvrira automatiquement (par introspection) les méthodes
 * Test de votre classe Test et générera la TestSuite conséquente.
 * Chaque appel d'une méthode Test sera précédé d'un appel de setUp(),
 * qui réalise les engagements, et suivi d'un appel à tearDown(), qui les
 * détruit.
 */
public class FahrenheitCelsiusTest extends junit.framework.TestCase
{
    // Définissez ici les variables d'instance nécessaires à vos engagements;
    // Vous pouvez également les saisir automatiquement du présentoir
    // à l'aide du menu contextuel "Présentoir --> Engagements".
    // Notez cependant que ce dernier ne peut saisir les objets primitifs
    // du présentoir (les objets sans constructeur, comme int, float, etc.).

    /**
     * Constructeur de la classe-test FahrenheitCelsiusTest
     */
    public FahrenheitCelsiusTest()
    {
    }

    /**
     * Met en place les engagements.
     *
     * Méthode appelée avant chaque appel de méthode de test.
     */
    protected void setUp() // throws java.lang.Exception
    {
        // Initialisez ici vos engagements

    }

    /**
     * Supprime les engagements
     *
     * Méthode appelée après chaque appel de méthode de test.
     */
    protected void tearDown() // throws java.lang.Exception
    {
        //Libérez ici les ressources engagées par setUp()
    }

    /**
     * Il ne vous reste plus qu'à définir une ou plusieurs méthodes de test.
     * Ces méthodes doivent vérifier les résultats attendus à l'aide d'assertions
     * assertTrue(<boolean>).
     * Par convention, leurs noms devraient débuter par "test".
     * Vous pouvez ébaucher le corps grâce au menu contextuel "Enregistrer une méthode de test".
     */
    public void test_fahrenheitEnCelsius() {
        assertEquals("    38 °F -> 3.3 °C ? ", 3.3, question2.FahrenheitCelsius.fahrenheitEnCelsius(38), 0.1);
        assertEquals("  163 °F -> 72.7 °C ? ", 72.7, question2.FahrenheitCelsius.fahrenheitEnCelsius(163), 0.1);
        assertEquals(" 305 °F -> 151.6 °C ?", 151.6, question2.FahrenheitCelsius.fahrenheitEnCelsius(305), 0.1);
        assertEquals("   418 °F -> 214.4 °C ?", 214.4, question2.FahrenheitCelsius.fahrenheitEnCelsius(418), 0.1);
    }
    
    // Un test pour les entiers négatifs
    public void test_fahrenheitEnCelsiusNegatif() {
        assertEquals("    -8 °F -> -22.2 °C ? ", -22.2, question2.FahrenheitCelsius.fahrenheitEnCelsius(-8), 0.1);
        assertEquals("    -91 °F -> -68.3 °C ? ", -68.3, question2.FahrenheitCelsius.fahrenheitEnCelsius(-91), 0.1);
    }
    
    // Un test pour les grands entiers  
    public void test_fahrenheitEnCelsiusEntier() {
        assertEquals("    2055349852 °F -> 1141861011.1 °C ? ", 1141861011.1, question2.FahrenheitCelsius.fahrenheitEnCelsius(2055349852), 0.1);
        assertEquals("    2143879068 °F -> 1191043908.8 °C ? ", 1191043908.8, question2.FahrenheitCelsius.fahrenheitEnCelsius(2143879068), 0.1);
    }
    
    // Un test pour s'assurer que le signe de la température est correcte
    public void test_fahrenheitEnCelsiusSigne() {
        assertTrue("La température en °C  de 32 °F est zéro ? ", question2.FahrenheitCelsius.fahrenheitEnCelsius(32) == 0);
        assertTrue("La température en °C  de 3 °F est négative ? ", question2.FahrenheitCelsius.fahrenheitEnCelsius(3) < 0 );
        assertTrue("La température en °C  de 70 °F est positive ? ", question2.FahrenheitCelsius.fahrenheitEnCelsius(70) > 0 );
    }
}
